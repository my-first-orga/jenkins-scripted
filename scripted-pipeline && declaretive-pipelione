
Global variable reference
==========================

jenkins --> select pipeline job --> pipeline syntax--> global variable reference --> click here

node
{
   echo "jenkins job name: ${env.JOB_NAME}"
   echo "build number is: ${env.BUILD_NUMBER}"
   echo "node name is: ${env.NODE_NAME}"
}



NOTE: In real time jenkins script is placed in the github 


--> copy file --> add file in git hub[Jenkinsfile] --> paste --> goto jenkins job --> pipeline Definition --> select pipeline Script from SCM.


IQ] Is it possible to give the custom name of jenkins file?

ANS: yes

--> edit file name in github --> and trigger the build --> error: unable to find the jenkins file


-->select job --> configure --> change the script path with latest name --> save.


--> Then trigger the build.





slack notifications
===================

node {

   echo "git branch name: ${env.JOB_NAME}"
   echo "build number is: ${env.BUILD_NUMBER}"
   echo "node name is: ${env.NODE_NAME}"
    
    def mavenHome=tool name: "maven"

    try {

	stage('git checkout')
	{
    notifyBuild('started')
    
     git branch: 'dev', credentialsId: '28ff8622-525e-437d-b715-56dc88964c44', url: 'https://github.com/my-first-orga/deploye-war-tomcat.git' 
	}
	
	stage('Build')
	{
    sh  "${mavenHome}/bin/mvn clean package"
	}
   stage('SQ Report')
	{
    sh  "${mavenHome}/bin/mvn sonar:sonar"
	}
	stage('Deploy into Nexus')
	{
    sh  "${mavenHome}/bin/mvn clean deploy"
	}
	stage('Deploy to Tomcat') {
        echo "Deploying WAR file using curl..."

        sh """
        curl -u admin:admin \
            --upload-file /var/lib/jenkins/workspace/scripted-job/target/maven-web-application.war \
            "http://44.201.155.191:8080/manager/text/deploy?path=/maven-web-application&update=true"
        """
    }

  } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}







NOTE: To display the Build started message, pls call notifyBuild('STARTED') before checkout stage.



Declarative pipelines
======================


pipeline {
    agent any 
tools
{
  maven "maven"
}

    stages {
        stage('checkout stage') { 
            steps {
             notifyBuild('started')
   git branch: 'dev', credentialsId: '28ff8622-525e-437d-b715-56dc88964c44', url: 'https://github.com/my-first-orga/deploye-war-tomcat.git' 
            }
        }
            stage('Build') { 
            steps {
         sh "mvn clean package"
                
            }
          }
          stage('SQREPORT'){
            steps{
          sh "mvn sonar:sonar"
          }
        }
         stage('DeployTONexus'){
           steps{
          sh "mvn deploy"
          }
        }
        stage('DeployAppToTomcat'){
           steps{

		echo "Deploying WAR file using curl..."

        sh """
            curl -u admi:admin \
            --upload-file /var/lib/jenkins/workspace/scripted-job/target/maven-web-application.war \
            "http://44.201.155.191:8080/manager/text/deploy?path=/maven-web-application&update=true"
        """
         
          }
        }
    } //stages closing

post {
  success {
    notifyBuild(currentBuild.result)
  }
  failure {
notifyBuild(currentBuild.result)
      }
}
}//pipeline closing


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  def slacknoti = ['#spy', '#developer']

  for (channel in slacknoti) {

    slackSend (color: colorCode, message: summary, channel: channel)
  }


}
